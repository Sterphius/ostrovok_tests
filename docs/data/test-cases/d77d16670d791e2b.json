{"uid":"d77d16670d791e2b","name":"test_holidays","fullName":"tests.API.test_ostrovok_api#test_holidays","historyId":"126f4ecb5fc94249fd0df850d8de1369","time":{"start":1681328377803,"stop":1681328377908,"duration":105},"status":"skipped","statusMessage":"XFAIL Result depends on geo\n\nTypeError: write() argument must be str, not list","statusTrace":"ostrovok = <utils.base_session.BaseSession object at 0x1045b17d0>\n\n    @allure.tag('API')\n    @allure.label('owner', 'Sterphius')\n    @allure.feature('API')\n    @allure.story('holidays')\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.xfail(reason='Result depends on geo')\n    def test_holidays(ostrovok):\n        result: Response = ostrovok.get(url='/api/v1/holidays')\n    \n        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files/holidays_list.json'), 'r') as f:\n            data = json.load(f)\n    \n        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files/current_holidays.json'), 'w') as f:\n>           f.write(result.json()['holidays'])\nE           TypeError: write() argument must be str, not list\n\ntests/API/test_ostrovok_api.py:60: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"load_env","time":{"start":1681328373586,"stop":1681328373587,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"ostrovok","time":{"start":1681328373587,"stop":1681328373587,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Result depends on geo\n\nTypeError: write() argument must be str, not list","statusTrace":"ostrovok = <utils.base_session.BaseSession object at 0x1045b17d0>\n\n    @allure.tag('API')\n    @allure.label('owner', 'Sterphius')\n    @allure.feature('API')\n    @allure.story('holidays')\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.xfail(reason='Result depends on geo')\n    def test_holidays(ostrovok):\n        result: Response = ostrovok.get(url='/api/v1/holidays')\n    \n        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files/holidays_list.json'), 'r') as f:\n            data = json.load(f)\n    \n        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files/current_holidays.json'), 'w') as f:\n>           f.write(result.json()['holidays'])\nE           TypeError: write() argument must be str, not list\n\ntests/API/test_ostrovok_api.py:60: TypeError","steps":[{"name":"GET /api/v1/holidays","time":{"start":1681328377803,"stop":1681328377907,"duration":104},"status":"passed","steps":[],"attachments":[{"uid":"b2c9aa3bd5ed83d0","name":"Request 200","source":"b2c9aa3bd5ed83d0.txt","type":"text/plain","size":343},{"uid":"d4a89b508fbd13c5","name":"Response 200","source":"d4a89b508fbd13c5.json","type":"application/json","size":4974}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"API"},{"name":"severity","value":"normal"},{"name":"story","value":"holidays"},{"name":"owner","value":"Sterphius"},{"name":"tag","value":"API"},{"name":"tag","value":"@pytest.mark.xfail(reason='Result depends on geo')"},{"name":"parentSuite","value":"tests.API"},{"name":"suite","value":"test_ostrovok_api"},{"name":"host","value":"Alexeys-MacBook-Pro.local"},{"name":"thread","value":"2671-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.API.test_ostrovok_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"Sterphius","retries":[],"categories":[],"tags":["@pytest.mark.xfail(reason='Result depends on geo')","API"]},"source":"d77d16670d791e2b.json","parameterValues":[]}